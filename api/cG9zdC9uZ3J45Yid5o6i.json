{"title":"ngrx初探","date":"2017-09-21T10:47:32.000Z","author":"许盛","excerpt":"<p>习惯了 <code>react + redux + redux-observable + rxjs</code> 的技术栈之后，最近开始尝试使用 <code>ng4</code> 。</p>","slug":"ngrx初探","comments":true,"tags":["ngrx","angular"],"categories":["angular"],"updated":"2018-08-23T08:50:44.302Z","content":"<p>习惯了 <code>react + redux + redux-observable + rxjs</code> 的技术栈之后，最近开始尝试使用 <code>ng4</code> 。</p>\n<a id=\"more\"></a>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>单纯的使用 <code>ng4</code> 就跟单纯的使用 <code>react</code> 一样，状态由 <code>组件</code> 或者 <code>service</code> 来进行维护，在跨组件通信等场景下，虽然也有很多方法去实现，但是总感觉不便于维护，特别是如果队友比较菜的情况下，那就是填不尽的坑，整个项目代码会变得特别松散。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>ngrx</code> 其实就相当于 <code>ng</code> 版本的 <code>redux + redux-observable</code>，参见 <code>github</code> ：</p>\n<p><a href=\"https://github.com/ngrx/platform\" target=\"_blank\" rel=\"noopener\">https://github.com/ngrx/platform</a></p>\n<p>从 <code>readme</code> 中的描述我们可以看到：</p>\n<p><img src=\"assets/images/ngrx初探/readme.png\" alt=\"readme\"></p>\n<p>整个 <code>ngrx</code> 分为了四大块。</p>\n<ol>\n<li><p>其中 <code>@ngrx/store</code> 为主要部分，可以看作是 <code>ng</code> 版的 <code>redux</code>  ，<code>action</code>、<code>reducer</code>、<code>store</code> 等都靠这个来维护。</p>\n</li>\n<li><p><code>@ngrx/effects</code> 的作用类似于 <code>redux-observable</code> ，用来处理项目中的一些异步 <code>action</code> 之类的 <code>side-effect</code> 。</p>\n</li>\n<li><p><code>@ngrx/router-store</code> 我感觉也是非常有用的一个模块。</p>\n<p>在 <code>ng4</code> 中对路由状态的处理比较复杂和麻烦，每次需要用的时候都需要在 <code>RouteState</code> 中去取相应的部分，<code>@ngrx/router-store</code> 可以让你定义一个格式化的功能，将自己需要的部分映射到 <code>@ngrx/store</code> 提供的 <code>store</code> 上，并在路由跳转的时候，自动监听并更新相应的值，如下图：</p>\n</li>\n</ol>\n<p><img src=\"assets/images/ngrx初探/router.png\" alt=\"router\"></p>\n<ol start=\"4\">\n<li><code>@ngrx/store-devtools</code>，就和字面意思一样，是调试使用的，结合 <code>chrome</code> 扩展 <code>redux-devtools</code> 一起使用，效果酷酷的：<a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">chrome扩展地址传送门</a></li>\n</ol>\n<p><img src=\"assets/images/ngrx初探/store-devtools.png\" alt=\"store-devtools\"></p>\n<h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><p>官方提供的 <code>example</code> 项目有点晦涩难懂，不是非常明晰，这里推荐  <a href=\"http://www.jianshu.com/p/0deec21d728f\" target=\"_blank\" rel=\"noopener\">Redux你的Angular 2应用–ngRx使用体验 </a> 这篇文章，文章中使用的是 <code>ng2</code> ，如果你的项目是使用的 <code>ng4</code>，那么结合这篇文章一起就行了：<a href=\"https://github.com/ngrx/platform/blob/master/MIGRATION.md\" target=\"_blank\" rel=\"noopener\">Migration Guide</a></p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><p>当使用 <code>Map</code>、<code>Set</code>  类型的变量时，在 <code>redux-devtools</code> 中好像没法显示出具体的值来，这是个天坑。</p>\n<p>这个时候就无比怀念 <code>logger</code> 中间件了，但是官网的介绍中找不到相关的资料，传送门：<a href=\"https://github.com/btroncone/ngrx-store-logger\" target=\"_blank\" rel=\"noopener\">ngrx-store-logger</a></p>\n<p>引入之后 <code>console</code> 中就出现了无比熟悉的画面：</p>\n<p><img src=\"assets/images/ngrx初探/logger.png\" alt=\"logger\"></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>有空了可以写个小 demo 出来，不过我觉得都已经用 <code>ng4</code> 了，引引 <code>ngrx</code> 这种事应该也难不倒了。</p>\n<p>如果需要的时候我还没贴 demo 链接，可以评论评论催催我~。</p>\n","prev":{"title":"go 设置 GOROOT 和 GOPATH","slug":"go设置GOROOT和GOPATH"},"next":{"title":"2017半载小记","slug":"2017半载小记"},"link":"/post/ngrx初探","toc":[{"title":"背景","id":"背景","index":"1"},{"title":"简介","id":"简介","index":"2"},{"title":"相关资料","id":"相关资料","index":"3"},{"title":"Tips","id":"Tips","index":"4"},{"title":"Example","id":"Example","index":"5"}]}