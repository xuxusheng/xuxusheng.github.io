{"title":"使用docker快速部署hexo博客","date":"2018-08-20T17:05:40.000Z","author":"许盛","excerpt":"<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a> 是一款静态博客工具，不涉及到任何后端、数据库啥的。</p>\n<p>也就是说不管过程中怎么乱七八糟的捣鼓，最终其实在部署的时候需要使用的，其实就是一堆前端静态资源，<code>html</code>、<code>js</code>、<code>css</code> 、<code>jpg</code> 等等，也就是使用 <code>hexo g</code> 命令生成出来的 <code>public</code> 文件夹中所包含的部分。</p>","slug":"使用docker快速部署hexo博客","comments":true,"tags":["hexo","docker"],"categories":["docker","hexo"],"updated":"2018-08-20T09:13:03.253Z","content":"<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a> 是一款静态博客工具，不涉及到任何后端、数据库啥的。</p>\n<p>也就是说不管过程中怎么乱七八糟的捣鼓，最终其实在部署的时候需要使用的，其实就是一堆前端静态资源，<code>html</code>、<code>js</code>、<code>css</code> 、<code>jpg</code> 等等，也就是使用 <code>hexo g</code> 命令生成出来的 <code>public</code> 文件夹中所包含的部分。</p>\n<a id=\"more\"></a>\n<p>那么通常来讲，对于没有个人服务器的同学来说，一般是使用 <code>github page</code> 的功能来将静态页面托管到 <code>github</code> 上，但是由于国内 <code>github</code> 速度感人，使用起来并不是那么顺畅。</p>\n<p>如果有个人服务器的话，我们可以使用 <code>nginx</code> 作为静态资源服务器，来快速部署我们的博客。</p>\n<p>下面将介绍如何利用 <code>docker</code> 的 <code>nginx</code> 镜像来快速部署博客。</p>\n<h2 id=\"一、服务器安装-docker-环境\"><a href=\"#一、服务器安装-docker-环境\" class=\"headerlink\" title=\"一、服务器安装 docker 环境\"></a>一、服务器安装 docker 环境</h2><h3 id=\"1-安装-docker\"><a href=\"#1-安装-docker\" class=\"headerlink\" title=\"1. 安装 docker\"></a>1. 安装 docker</h3><p>参考： <a href=\"https://blog.csdn.net/xs20691718/article/details/81807217\" target=\"_blank\" rel=\"noopener\">在 linux、mac 下快速简单的安装 docker</a></p>\n<h3 id=\"2-安装-docker-compose\"><a href=\"#2-安装-docker-compose\" class=\"headerlink\" title=\"2. 安装 docker-compose\"></a>2. 安装 docker-compose</h3><p><code>docker-compose</code> 并不是必须使用的，这里是为了更方便的管理我们的容器。 </p>\n<p><code>macos</code> 下安装 <code>docker</code> 时自动就安装了 <code>docker-compose</code>，<code>linux</code> 则需要使用下面的命令手动安装一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L https://github.com/docker/compose/releases/download/1.8.0/run.sh &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">$ chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、初始化博客\"><a href=\"#二、初始化博客\" class=\"headerlink\" title=\"二、初始化博客\"></a>二、初始化博客</h2><p>使用 <code>npm i -g hexo-cli</code> 命令全局安装 <code>hexo-cli</code>，然后使用 <code>hexo init blog</code> 即可生成一个最简单的博客项目了。</p>\n<p>然后在项目中新建一个 <code>.npmrc</code> 文件，将 <code>registry=https://registry.npm.taobao.org</code> 写入文件中，这个的作用是在安装依赖包将镜像源切换为国内的淘宝源。</p>\n<p>此时可以执行 <code>hexo s</code> 命令后，在浏览器中访问 <code>http://localhost:4000</code>，就可以看到博客的页面了。<br><img src=\"/assets/images/使用docker快速部署hexo博客/hexo.png\" alt=\"hexo s 启动\"></p>\n<h2 id=\"三、添加-Dockerfile-文件\"><a href=\"#三、添加-Dockerfile-文件\" class=\"headerlink\" title=\"三、添加 Dockerfile 文件\"></a>三、添加 Dockerfile 文件</h2><p>这里需要理清楚思路的一点是，整个部署流程我们分为两个阶段，第一个阶段是生成静态文件，也就是使用 <code>hexo g</code> 命令生成 <code>public</code> 文件夹，此过程依赖 <code>nodejs</code> 环境，而第二个阶段则是启动 <code>nginx</code>。</p>\n<p>两个阶段我们会使用 <code>dockerfile</code> 的多阶段构建来实现，第一个阶段的 <code>nodejs</code> 容器中生成的 <code>public</code> 文件夹会被拷贝到第二个阶段的 <code>nginx</code> 容器中使用，最终生成的是一个包含了博客静态资源和 <code>nginx</code> 的镜像。</p>\n<p><code>Dockerfile</code> 文件如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /Dockerfile</span><br><span class=\"line\">FROM node:8-alpine as builder</span><br><span class=\"line\">WORKDIR /project</span><br><span class=\"line\">COPY . /project/</span><br><span class=\"line\">RUN yarn \\</span><br><span class=\"line\">    &amp;&amp; yarn global add hexo-cli \\</span><br><span class=\"line\">    &amp;&amp; hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">FROM nginx:alpine</span><br><span class=\"line\">COPY --from=builder /project/public /usr/share/nginx/html</span><br><span class=\"line\">RUN apk add --no-cache bash</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为是使用的 alpine 版本的镜像，并没有安装 bash，所有在部署完成后无法通过 docker exec -it xx bash 进入容器中，所以加上了一行 apk add –no-cache bash，如果没有后期进入容器的需求，可以删除这一行，提高构建时的速度。</p>\n</blockquote>\n<h2 id=\"三、添加-docker-compose-yml-文件\"><a href=\"#三、添加-docker-compose-yml-文件\" class=\"headerlink\" title=\"三、添加 docker-compose.yml 文件\"></a>三、添加 docker-compose.yml 文件</h2><p>其实不使用 <code>docker-compose</code>，直接 <code>docker run</code> 也是可以的，但是使用 <code>docker-compose</code> 更方便管理，也更加直观一点。</p>\n<p>新建 <code>docker-compose.yml</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /docker-compose.yml</span><br><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  app:</span><br><span class=\"line\">    container_name: blog</span><br><span class=\"line\">    build:</span><br><span class=\"line\">      context: ./</span><br><span class=\"line\">      dockerfile: ./ci/Dockerfile</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - &quot;8080:80&quot;</span><br><span class=\"line\">    restart: on-failure</span><br></pre></td></tr></table></figure>\n<p>上述文件中指定了 <code>容器名字</code>、<code>Dockerfile</code> 以及需要映射到宿主机的哪个 <code>端口</code> 上，可以根据自己的需求自行调整。</p>\n<h2 id=\"构建并运行容器\"><a href=\"#构建并运行容器\" class=\"headerlink\" title=\"构建并运行容器\"></a>构建并运行容器</h2><p>在项目目录下执行命令 <code>docker-compse up --build -d</code>，然后在浏览器中访问 <code>https://localhost:8080</code>，如果看到博客页面了，部署就大功告成啦。<br><img src=\"/assets/images/使用docker快速部署hexo博客/docker.png\" alt=\"docker-compose\"></p>\n","prev":{"title":"快速批量删除docker镜像或容器","slug":"快速批量删除docker镜像或容器"},"next":{"title":"hexo发布之后gitpage自定义域名失效","slug":"hexo发布之后gitpage自定义域名失效"},"link":"/post/使用docker快速部署hexo博客","toc":[{"title":"一、服务器安装 docker 环境","id":"一、服务器安装-docker-环境","index":"1","children":[{"title":"1. 安装 docker","id":"1-安装-docker","index":"1.1"},{"title":"2. 安装 docker-compose","id":"2-安装-docker-compose","index":"1.2"}]},{"title":"二、初始化博客","id":"二、初始化博客","index":"2"},{"title":"三、添加 Dockerfile 文件","id":"三、添加-Dockerfile-文件","index":"3"},{"title":"三、添加 docker-compose.yml 文件","id":"三、添加-docker-compose-yml-文件","index":"4"},{"title":"构建并运行容器","id":"构建并运行容器","index":"5"}]}